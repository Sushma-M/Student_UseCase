/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.school_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.student_usecase.school_db.Table51;
import com.student_usecase.school_db.service.Table51Service;

/**
 * Controller object for domain model class Table51.
 * @see Table51
 */
@RestController("School_DB.Table51Controller")
@Api(value = "Table51Controller", description = "Exposes APIs to work with Table51 resource.")
@RequestMapping("/School_DB/Table51")
public class Table51Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table51Controller.class);

    @Autowired
    @Qualifier("School_DB.Table51Service")
    private Table51Service table51Service;

    @ApiOperation(value = "Creates a new Table51 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table51 createTable51(@RequestBody Table51 table51) {
        LOGGER.debug("Create Table51 with information: {}", table51);
        table51 = table51Service.create(table51);
        LOGGER.debug("Created Table51 with information: {}", table51);
        return table51;
    }

    @ApiOperation(value = "Returns the Table51 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table51 getTable51(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table51 with id: {}", id);
        Table51 foundTable51 = table51Service.getById(id);
        LOGGER.debug("Table51 details with id: {}", foundTable51);
        return foundTable51;
    }

    @ApiOperation(value = "Updates the Table51 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table51 editTable51(@PathVariable("id") String id, @RequestBody Table51 table51) throws EntityNotFoundException {
        LOGGER.debug("Editing Table51 with id: {}", table51.getId());
        table51.setId(id);
        table51 = table51Service.update(table51);
        LOGGER.debug("Table51 details with id: {}", table51);
        return table51;
    }

    @ApiOperation(value = "Deletes the Table51 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable51(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table51 with id: {}", id);
        Table51 deletedTable51 = table51Service.delete(id);
        return deletedTable51 != null;
    }

    /**
     * @deprecated Use {@link #findTable51s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table51 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table51> findTable51s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table51s list");
        return table51Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Table51 instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table51> findTable51s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table51s list");
        return table51Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable51s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table51Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Table51 instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countTable51s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table51s");
        return table51Service.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table51Service instance
	 */
    protected void setTable51Service(Table51Service service) {
        this.table51Service = service;
    }
}
