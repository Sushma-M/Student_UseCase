/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.school_db;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Subjects generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Subjects`")
@IdClass(SubjectsId.class)
public class Subjects implements Serializable {

    private String standard;
    private Date academicYear;
    private String subjectName;
    private Academics academics;

    @Id
    @Column(name = "`Standard`", nullable = false, length = 255)
    public String getStandard() {
        return this.standard;
    }

    public void setStandard(String standard) {
        this.standard = standard;
    }

    @Id
    @Temporal(TemporalType.DATE)
    @Column(name = "`Academic_Year`", nullable = false)
    public Date getAcademicYear() {
        return this.academicYear;
    }

    public void setAcademicYear(Date academicYear) {
        this.academicYear = academicYear;
    }

    @Id
    @Column(name = "`Subject_Name`", nullable = false, length = 255)
    public String getSubjectName() {
        return this.subjectName;
    }

    public void setSubjectName(String subjectName) {
        this.subjectName = subjectName;
    }


    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumns({
            @JoinColumn(name = "`Academic_Year`", referencedColumnName = "`Academic Year`", insertable = false, updatable = false),
            @JoinColumn(name = "`Standard`", referencedColumnName = "`Standard`", insertable = false, updatable = false)        })
    public Academics getAcademics() {
        return this.academics;
    }

    public void setAcademics(Academics academics) {
        if(academics != null) {
            this.academicYear = academics.getAcademicYear();
            this.standard = academics.getStandard();
        }

        this.academics = academics;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Subjects)) return false;
        final Subjects subjects = (Subjects) o;
        return Objects.equals(getStandard(), subjects.getStandard()) &&
                Objects.equals(getAcademicYear(), subjects.getAcademicYear()) &&
                Objects.equals(getSubjectName(), subjects.getSubjectName());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getStandard(),
                getAcademicYear(),
                getSubjectName());
    }
}

