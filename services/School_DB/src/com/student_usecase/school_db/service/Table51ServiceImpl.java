/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.student_usecase.school_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.student_usecase.school_db.Table51;


/**
 * ServiceImpl object for domain model class Table51.
 *
 * @see Table51
 */
@Service("School_DB.Table51Service")
public class Table51ServiceImpl implements Table51Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table51ServiceImpl.class);


    @Autowired
    @Qualifier("School_DB.Table51Dao")
    private WMGenericDao<Table51, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table51, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "School_DBTransactionManager")
    @Override
	public Table51 create(Table51 table51) {
        LOGGER.debug("Creating a new Table51 with information: {}", table51);
        Table51 table51Created = this.wmGenericDao.create(table51);
        return table51Created;
    }

	@Transactional(readOnly = true, value = "School_DBTransactionManager")
	@Override
	public Table51 getById(String table51Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table51 by id: {}", table51Id);
        Table51 table51 = this.wmGenericDao.findById(table51Id);
        if (table51 == null){
            LOGGER.debug("No Table51 found with id: {}", table51Id);
            throw new EntityNotFoundException(String.valueOf(table51Id));
        }
        return table51;
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
	@Override
	public Table51 findById(String table51Id) {
        LOGGER.debug("Finding Table51 by id: {}", table51Id);
        return this.wmGenericDao.findById(table51Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "School_DBTransactionManager")
	@Override
	public Table51 update(Table51 table51) throws EntityNotFoundException {
        LOGGER.debug("Updating Table51 with information: {}", table51);
        this.wmGenericDao.update(table51);

        String table51Id = table51.getId();

        return this.wmGenericDao.findById(table51Id);
    }

    @Transactional(value = "School_DBTransactionManager")
	@Override
	public Table51 delete(String table51Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table51 with id: {}", table51Id);
        Table51 deleted = this.wmGenericDao.findById(table51Id);
        if (deleted == null) {
            LOGGER.debug("No Table51 found with id: {}", table51Id);
            throw new EntityNotFoundException(String.valueOf(table51Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "School_DBTransactionManager")
	@Override
	public Page<Table51> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table51s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Page<Table51> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table51s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "School_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service School_DB for table Table51 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "School_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

